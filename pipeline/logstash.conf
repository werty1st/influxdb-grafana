input {

  udp {
    port => 12346
    id => "syslog"
    type => syslog
    add_field => { "[@metadata][source]" => "syslog" }
  }

}

filter {

  if "syslog" == [type] {

    mutate {
        add_field => { "version" => "default-0" }
    }

    grok {
      match => { "message" => [
        "<%{POSINT:priority}>%{TIMESTAMP_ISO8601:timestamp} %{SYSLOGHOST:logsource} %{SYSLOGPROG}: recoservice=%{WORD:engine} recotiming=%{NUMBER:duration}",
        "recoservice=%{USERNAME:engine} recotiming=%{NUMBER:duration} version=%{USERNAME:version}"
      ]}
      overwrite => [ "version" ]
    }
  }
  
  #if "_grokparsefailure" in [tags] { drop {} }

}

output {

  if "syslog" == [@metadata][source]{
    influxdb {
      host => "influxdb"
      password => "syslog"
      user => "syslog"
      db => "syslog"
      codec => "json"
      use_event_fields_for_data_points => false
      data_points =>  {
        "host" => "%{logsource}"
        "engine" => "%{engine}"
        "duration" => "%{duration}"
        "version" => "%{version}"
      }
      coerce_values => {
        "duration" => "integer"
      }
      send_as_tags => ["host", "engine", "version" ] 
      #exclude_fields => ["@timestamp", "timestamp", "@version", "host", "message", "type", "priority", "pid", "port"]      
    }
    #stdout { codec => rubydebug }
    #stdout {codec => json}
  }

  #stdout { codec => rubydebug }
  stdout {}

}